
list<Feature> l1 = new ArrayList<Feature>();
		l1.add(new Feature("A", 0.46, 3));
		l1.add(new Feature("B", 0.31, 4));
		l1.add(new Feature("E", 0.31, 4));
		l1.add(new Feature("H", 0.31, 4));
		l1.add(new Feature("J", 0.62, 3));
		l1.add(new Feature("K", 0.31, 3));
		l1.add(new Feature("O", 0.15, 3));
		
		Collections.sort(l1);
		
	Map<Feature, Integer> testMap = new HashMap<>();
	int count = 0;
	
	for(Feature j: l1){
		System.out.println(j);
	}
	for(Feature j: l1){
		testMap.put(j,++count);
	}
		
	for(Feature j: l1){
		System.out.println( testMap.get(j) );
	}
		System.out.println( testMap);



		public static List<Resultado> findMatches2Larissa(Vetor X, Map<String, List<VetorIndexado>> I, double T) {

    		Map<Vetor, Double> A = new HashMap<Vetor, Double>();

    		List<Resultado> M = new ArrayList<>();
    		List<VetorIndexado> listaVetorIndexado = null;
    		VetorIndexado vetorIndexado = null;

    		double s = 0.0;

    		double remscore = 0.0;

    		double minsize = (double) T / X.maxw; // filtro por tamanho

    		for (Feature feature : X.lista) // somat√≥rio maxweight(V)
    		{
    			remscore += (feature.peso * feature.maxW);
    		}

    		for (Feature feature : X.lista)//ordem inversa
    		{
    			listaVetorIndexado = I.get(feature.value);
    			if (listaVetorIndexado != null)
    			{

    			Iterator<VetorIndexado> v = listaVetorIndexado.iterator();

    				while(v.hasNext()) {

    					vetorIndexado=v.next();

    					if(vetorIndexado.vetor.lista.size() < minsize ) {
    						v.remove();
    						continue;
    					}

    					double similarity = feature.peso * vetorIndexado.peso;
    					Double oldSimilarity = A.get(vetorIndexado.vetor.id);

    					if (oldSimilarity == null) {
    						oldSimilarity = 0.0;
    					}

    					if(oldSimilarity!=0.0 || remscore>= T)
    					{
    						A.put(vetorIndexado.vetor, similarity + oldSimilarity);
    						remscore = remscore - similarity * X.maxw;
    					}

    				}
    			}
    		}

    		if(A.isEmpty()) {
    			return M;
    		}

    		Map<String, Double> xHash= new HashMap<String, Double>();

    		for (Feature feature : X.lista) {
    			xHash.put(feature.value, feature.peso);
    		}

    		Vetor y=null;

    		for (Map.Entry<Vetor, Double> entry : A.entrySet())
    		{
    			double partialSim=entry.getValue();
    			y=entry.getKey();

    			if(partialSim + Math.min(y.posUltimoElemento, X.lista.size()) * X.maxw * y.maxw_xlinha  >=T)
    			{
    				s = entry.getValue() + dotLarissaHash(xHash, y); // percorrer o y ate a ultima pos indexada
    				if (s >= T)
    				{
    					M.add(new Resultado(X.id, y.id, s));
    				}
    			}

    		}
    		return M;
    	}

    	public static double dotLarissaHash(Map<String, Double > x, Vetor y) {
    		double dotProduct = 0.0;
    		Double peso=null;
    		Feature f=null;

    		for (int i = 0; i < y.posUltimoElemento; i++) {
    		 f=y.lista.get(i);

    			peso= x.get(f.value);
    			if(peso!=null) {
    				dotProduct +=peso * f.peso;

    			}
    		}
    		return dotProduct;
    	}
    	public static double dotLarissa(Vetor X, Vetor y){

    		double dotProduct = 0.0;
    		for (int i = 0; i < y.posUltimoElemento; i++) {
    			for (int j = 0; j < X.lista.size(); j++) {
    				dotProduct += y.lista.get(i).peso * X.lista.get(j).peso;
    			}
    		}

    		return dotProduct;
    	}

    	public static List<Resultado> allPairs2Larissa(List<Vetor> V, double T) {

    		Map<String, List<VetorIndexado>> indexVector = new HashMap<String, List<VetorIndexado>>();
    		List<Resultado> O = new ArrayList<>();
    		List<VetorIndexado> I = null;
    		VetorIndexado vetorIndexado = null;
    		double b;


    		for (Vetor x : V) {

    			O.addAll(findMatches2Larissa(x, indexVector, T));
    			b = 0.0;

    			for (Feature feature : x.lista) {
    				b = b + Math.min(feature.peso, x.maxw) * feature.maxW;

    				if (b >= T)
    				{

    					I = indexVector.get(feature.value);
    					if (I == null) {
    						I = new LinkedList<VetorIndexado>();
    					}
    					vetorIndexado = new VetorIndexado(x, feature.peso);
    					I.add(vetorIndexado);
    					indexVector.put(feature.value, I);
    					feature.peso = 0.0;
    				}
    				else
    				{
    						if(feature.peso > x.maxw_xlinha)
    						{
    							x.maxw_xlinha=feature.peso;
    						}

    						x.posUltimoElemento+=1;
    				}

    			}
    		}

    		return O;
    	}
